{"version":3,"file":"static/js/845.eb359a3b.chunk.js","mappings":"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","sources":["components/Contacts/Contacts.styled.jsx","components/Contacts/Contacts.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Form/Form.jsx","components/Notification/Notification.jsx","pages/Contacts.jsx","redux/contacts/selectors.js","redux/contacts/useContacts.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  align-items: center;\n  gap: 40px;\n\n  margin-top: 40px;\n`;\n\nexport const Item = styled.li``;\n\nexport const Text = styled.p`\n  display: block;\n  font-weight: 700;\n`;\n\nexport const Button = styled.button`\n  display: block;\n  margin: auto;\n  font-size: 18px;\n  font-weight: 700;\n\n  padding: 8px 28px;\n  color: #a201ff;\n\n  border: 2px solid purple;\n  border-radius: 8px;\n\n  filter: drop-shadow(0px 0px 20px #00ffff);\n\n  &:hover,\n  &:focus {\n    filter: drop-shadow(0px 0px 20px #a201ff);\n    color: #a201ff;\n    border: 2px solid #00ffff;\n  }\n`;\n","import PropTypes from 'prop-types';\n\nimport { List, Item, Text, Button } from './Contacts.styled';\n\nimport { useContacts } from 'redux/contacts/useContacts';\n\nexport const ContactList = () => {\n  const { handleDelete, contactsFilterName } = useContacts();\n\n  return (\n    <List>\n      {contactsFilterName.map(({ id, name, number }) => (\n        <Item key={id}>\n          <Text>\n            {name}: {number}\n          </Text>\n          <Button type=\"button\" onClick={() => handleDelete(id)}>\n            Delete\n          </Button>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.number.isRequired,\n    }).isRequired\n  ),\n};\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  color: brown;\n  font-weight: 900;\n  font-size: 20px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n\n  font-size: 20px;\n  font-weight: 700;\n  margin: auto;\n  color: purple;\n  background-color: transparent;\n  outline: 1px solid aqua;\n\n  margin-top: 20px;\n\n  filter: drop-shadow(0px 0px 20px #00ffff);\n\n  &:hover,\n  &:focus {\n    filter: drop-shadow(0px 0px 20px #a201ff);\n  }\n`;\n","import { Label, Input } from './Filter.styled';\n\nimport { useContacts } from 'redux/contacts/useContacts';\n\nexport const Filter = () => {\n  const { filter, handleFilter } = useContacts();\n\n  return (\n    <Label>\n      Filter contacts by name\n      <Input type=\"text\" onChange={handleFilter} value={filter} />\n    </Label>\n  );\n};\n","import { Formik } from 'formik';\nimport { object, string } from 'yup';\n\nimport { FormikForm, Label, FormikInput, Button, Error } from './Form.styled';\nimport { useContacts } from 'redux/contacts/useContacts';\n\nconst phoneRegExp =\n  /^(?:\\+38)?(?:\\(0\\d{2}\\)|0\\d{2})[ -]?\\d{3}[ -]?\\d{2}[ -]?\\d{2}$/;\n\nconst schema = object().shape({\n  name: string()\n    .min(5, 'must be at least 3 characters long')\n    .max(12, 'must be no more than 12 characters')\n    .required('This field is required'),\n  number: string()\n    .matches(phoneRegExp, 'Please enter a valid phone number +380')\n    .required('A phone number is required'),\n});\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\n\nexport const FormContact = () => {\n  const { handleNotificationForm } = useContacts();\n\n  const handleSubmit = (values, { resetForm }) => {\n    handleNotificationForm(values);\n    resetForm();\n  };\n\n  return (\n    <Formik\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n      initialValues={INITIAL_STATE}\n    >\n      <FormikForm>\n        <Label>\n          Name\n          <FormikInput type=\"text\" name=\"name\" />\n          <Error name=\"name\" component=\"p\" />\n        </Label>\n        <Label>\n          Number\n          <FormikInput type=\"tel\" name=\"number\" />\n          <Error name=\"number\" component=\"p\" />\n        </Label>\n\n        <Button type=\"submit\">Add Contacts</Button>\n      </FormikForm>\n    </Formik>\n  );\n};\n\n// FormContact.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\n// const INITIAL_STATE = {\n//   name: '',\n//   number: '',\n// };\n\n// export const FormContact = ({ onSubmit }) => {\n//   const handleSubmit = (values, { resetForm }) => {\n//     onSubmit({ ...values, id: nanoid() });\n\n//     resetForm();\n//   };\n\n//   return (\n//     <Formik\n//       validationSchema={schema}\n//       initialValues={INITIAL_STATE}\n//       onSubmit={handleSubmit}\n//     >\n//       <FormikForm>\n//         <Label>\n//           Name\n//           <FormikInput type=\"text\" name=\"name\" />\n//           <Error name=\"name\" component=\"p\" />\n//         </Label>\n//         <Label>\n//           Number\n//           <FormikInput type=\"tel\" name=\"number\" />\n//           <Error name=\"number\" component=\"p\" />\n//         </Label>\n\n//         <Button type=\"submit\">Add Contacts</Button>\n//       </FormikForm>\n//     </Formik>\n//   );\n// };\n\n// FormContact.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Text } from './Notification.styled';\n\nexport const Notification = ({ message }) => {\n  return <Text>{message}</Text>;\n};\n\nNotification.protoTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import { Section } from 'components';\nimport { ContactList } from 'components/Contacts/Contacts';\nimport { Filter } from 'components/Filter/Filter';\nimport { FormContact } from 'components/Form/Form';\nimport { Notification } from 'components/Notification/Notification';\nimport { useEffect } from 'react';\n// import { Helmet } from 'react-helmet';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { useContacts } from 'redux/contacts/useContacts';\n\nexport default function Contacts() {\n  const { contacts, isLoading, error } = useContacts();\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Section>\n      {/* <Helmet>\n        <title>Your Contacts</title>\n      </Helmet> */}\n      <FormContact />\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      {contacts.length > 0 ? (\n        <ContactList />\n      ) : (\n        <Notification message=\"There is no feedback\" />\n      )}\n    </Section>\n  );\n}\n","//=============== Before ========================\n\n// export const selectContacts = state => state.contacts.items;\n// export const selectFilter = state => state.contacts.filter;\n\n//=============== After ========================\n\nimport { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilterName = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","//=============== Before ========================\n\n// import { useDispatch, useSelector } from 'react-redux';\n// import { selectContacts, selectFilter } from './selectors';\n\n// import * as actions from './contactsSlice';\n\n// export const useContacts = () => {\n//   const dispath = useDispatch();\n//   const contacts = useSelector(selectContacts);\n//   const filter = useSelector(selectFilter);\n\n//   const addContact = newContact => {\n//     dispath(actions.addContact(newContact));\n//   };\n//   const deleteContact = id => {\n//     dispath(actions.deleteContact(id));\n//   };\n//   const changeFilter = e => {\n//     dispath(actions.changeFilter(e.target.value));\n//   };\n\n//   return { addContact, deleteContact, changeFilter, contacts, filter };\n// };\n\n//=============== After ========================\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectError,\n  selectFilter,\n  selectFilterName,\n  selectIsLoading,\n} from './selectors';\nimport { addContact, deleteContact } from './operations';\nimport { filterContact } from './filterSlice';\n\nexport const useContacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const handleDelete = id => dispatch(deleteContact(id));\n\n  const contactsFilterName = useSelector(selectFilterName);\n\n  const handleFilter = e => {\n    dispatch(filterContact(e.target.value));\n  };\n\n  const handleNotificationForm = values => {\n    const existingContact = contacts.find(\n      contact => contact.number === values.number\n    );\n    if (existingContact) {\n      alert(\n        `Sorry ${values.name}, this number is already registered, please enter another one.`\n      );\n      return;\n    }\n    dispatch(addContact({ ...values }));\n  };\n\n  return {\n    contacts,\n    filter,\n    isLoading,\n    error,\n    dispatch,\n    handleDelete,\n    contactsFilterName,\n    handleFilter,\n    handleNotificationForm,\n  };\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["List","styled","Item","Text","Button","ContactList","useContacts","handleDelete","contactsFilterName","map","id","name","number","type","onClick","Label","Input","Filter","filter","handleFilter","onChange","value","schema","object","shape","string","min","max","required","matches","INITIAL_STATE","FormContact","handleNotificationForm","validationSchema","onSubmit","values","resetForm","initialValues","component","Notification","message","protoTypes","PropTypes","Contacts","contacts","isLoading","error","dispatch","useDispatch","useEffect","fetchContacts","length","selectContacts","state","items","selectFilter","selectIsLoading","selectError","selectFilterName","createSelector","contact","toLowerCase","includes","useSelector","deleteContact","e","filterContact","target","find","alert","addContact","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","exact","checkPropTypes"],"sourceRoot":""}