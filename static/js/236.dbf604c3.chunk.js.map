{"version":3,"file":"static/js/236.dbf604c3.chunk.js","mappings":"yTAGaA,GAAaC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,wDAKVE,EAAQF,EAAAA,EAAAA,MAAH,gOAYLG,GAAcH,EAAAA,EAAAA,GAAOI,EAAAA,GAAPJ,CAAH,wTAkBXK,EAASL,EAAAA,EAAAA,OAAH,+nBAqCNM,GAAQN,EAAAA,EAAAA,GAAOO,EAAAA,GAAPP,CAAH,qH,yHChEZQ,GAASC,EAAAA,EAAAA,MAASC,MAAM,CAC5BC,MAAMC,EAAAA,EAAAA,MAASC,WACfC,OAAOF,EAAAA,EAAAA,MAASE,QAChBC,UAAUH,EAAAA,EAAAA,MAASC,aAGfG,EAAgB,CACpBL,KAAM,GACNG,MAAO,GACPC,SAAU,IAGCE,EAAe,WAC1B,IAAQC,GAA2BC,EAAAA,EAAAA,KAA3BD,uBAQR,OACE,SAAC,KAAD,CACEE,iBAAkBZ,EAClBa,SATiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BC,QAAQC,IAAIH,GACZJ,EAAuBI,GACvBC,GACD,EAMGG,cAAeV,EAHjB,UAKE,UAAC,KAAD,YACE,UAAC,KAAD,mBAEE,SAAC,KAAD,CAAaW,KAAK,OAAOhB,KAAK,UAC9B,SAAC,KAAD,CAAOA,KAAK,OAAOiB,UAAU,UAE/B,UAAC,KAAD,oBAEE,SAAC,KAAD,CAAaD,KAAK,OAAOhB,KAAK,WAC9B,SAAC,KAAD,CAAOA,KAAK,QAAQiB,UAAU,UAEhC,UAAC,KAAD,qBAEE,SAAC,KAAD,CAAaD,KAAK,WAAWhB,KAAK,cAClC,SAAC,KAAD,CAAOA,KAAK,WAAWiB,UAAU,UAGnC,SAAC,KAAD,CAAQD,KAAK,SAAb,0BAIP,ECxDc,SAASE,IACtB,OACE,0BAIE,SAACZ,EAAD,KAGL,C,yFCHYa,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAEtBC,EAAe,SAAAH,GAAK,OAAIA,EAAMI,MAAV,EAEpBC,EAAkB,SAAAL,GAAK,OAAIA,EAAMC,SAASK,SAAnB,EAEvBC,EAAc,SAAAP,GAAK,OAAIA,EAAMC,SAASO,KAAnB,EAEnBC,GAAmBC,EAAAA,EAAAA,IAC9B,CAACX,EAAgBI,IACjB,SAACF,EAAUG,GACT,OAAOH,EAASG,QAAO,SAAAO,GAAO,OAC5BA,EAAQ/B,KAAKgC,cAAcC,SAAST,EAAOQ,cADf,GAG/B,I,oBCeUxB,EAAc,WACzB,IAAM0B,GAAWC,EAAAA,EAAAA,MACXd,GAAWe,EAAAA,EAAAA,IAAYjB,GACvBK,GAASY,EAAAA,EAAAA,IAAYb,GACrBG,GAAYU,EAAAA,EAAAA,IAAYX,GACxBG,GAAQQ,EAAAA,EAAAA,IAAYT,GAIpBU,GAAqBD,EAAAA,EAAAA,IAAYP,GAmBvC,MAAO,CACLR,SAAAA,EACAG,OAAAA,EACAE,UAAAA,EACAE,MAAAA,EACAM,SAAAA,EACAI,aA3BmB,SAAAC,GAAE,OAAIL,GAASM,EAAAA,EAAAA,IAAcD,GAA3B,EA4BrBF,mBAAAA,EACAI,aAzBmB,SAAAC,GACnBR,GAASS,EAAAA,EAAAA,GAAcD,EAAEE,OAAOC,OACjC,EAwBCtC,uBAtB6B,SAAAI,GACLU,EAASyB,MAC/B,SAAAf,GAAO,OAAIA,EAAQgB,SAAWpC,EAAOoC,MAA9B,IAGPC,MAAM,SAAD,OACMrC,EAAOX,KADb,mEAKPkC,GAASe,EAAAA,EAAAA,KAAW,UAAKtC,IAC1B,EAaF,C","sources":["components/LoginForm/LoginForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/Register.jsx","redux/contacts/selectors.js","redux/contacts/useContacts.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormikForm = styled(Form)`\n  display: flex;\n  gap: 40px;\n`;\n\nexport const Label = styled.label`\n  font-weight: 700;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: baseline;\n  gap: 40px;\n  padding: 40px;\n\n  filter: drop-shadow(0px 0px 20px #a201ff);\n`;\n\nexport const FormikInput = styled(Field)`\n  display: block;\n\n  font-size: 20px;\n  font-weight: 700;\n  margin: auto;\n  color: #00ffff;\n  background-color: transparent;\n  outline: 1px solid aqua;\n\n  filter: drop-shadow(0px 0px 20px #00ffff);\n\n  &:hover,\n  &:focus {\n    filter: drop-shadow(0px 0px 20px #a201ff);\n  }\n`;\n\nexport const Button = styled.button`\n  display: block;\n  margin: auto;\n  font-size: 18px;\n  font-weight: 700;\n  color: #a201ff;\n\n  padding: 8px;\n\n  border: 2px solid purple;\n  border-radius: 8px;\n\n  filter: drop-shadow(0px 0px 20px #00ffff);\n\n  &:hover,\n  &:focus {\n    filter: drop-shadow(0px 0px 20px #a201ff);\n    color: #a201ff;\n    border: 2px solid #00ffff;\n  }\n\n  animation: glow 5s ease-in-out infinite;\n\n  @keyframes glow {\n    0%,\n    100% {\n      color: aqua;\n      text-shadow: 0 0 12px aqua, 0 0 50px aqua, 0 0 100px aqua;\n    }\n    10%,\n    90% {\n      color: #a201ff;\n      text-shadow: none;\n    }\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  position: absolute;\n  top: 100%;\n  filter: drop-shadow(0px 0px 20px red);\n  color: red;\n`;\n","import { Formik } from 'formik';\nimport { object, string } from 'yup';\nimport {\n  FormikForm,\n  Label,\n  FormikInput,\n  Button,\n  Error,\n} from '../LoginForm/LoginForm.styled';\nimport { useContacts } from 'redux/contacts/useContacts';\n\nconst schema = object().shape({\n  name: string().required(),\n  email: string().email(),\n  password: string().required(),\n});\n\nconst INITIAL_STATE = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nexport const RegisterForm = () => {\n  const { handleNotificationForm } = useContacts();\n\n  const handleSubmit = (values, { resetForm }) => {\n    console.log(values);\n    handleNotificationForm(values);\n    resetForm();\n  };\n\n  return (\n    <Formik\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n      initialValues={INITIAL_STATE}\n    >\n      <FormikForm>\n        <Label>\n          Name\n          <FormikInput type=\"text\" name=\"name\" />\n          <Error name=\"name\" component=\"p\" />\n        </Label>\n        <Label>\n          Email\n          <FormikInput type=\"text\" name=\"email\" />\n          <Error name=\"email\" component=\"p\" />\n        </Label>\n        <Label>\n          Number\n          <FormikInput type=\"password\" name=\"password\" />\n          <Error name=\"password\" component=\"p\" />\n        </Label>\n\n        <Button type=\"submit\">Register</Button>\n      </FormikForm>\n    </Formik>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n// import { Helmet } from 'react-helmet';\n\nexport default function Register() {\n  return (\n    <div>\n      {/* <Helmet>\n        <title>Registration</title>\n      </Helmet> */}\n      <RegisterForm />\n    </div>\n  );\n}\n","//=============== Before ========================\n\n// export const selectContacts = state => state.contacts.items;\n// export const selectFilter = state => state.contacts.filter;\n\n//=============== After ========================\n\nimport { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilterName = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","//=============== Before ========================\n\n// import { useDispatch, useSelector } from 'react-redux';\n// import { selectContacts, selectFilter } from './selectors';\n\n// import * as actions from './contactsSlice';\n\n// export const useContacts = () => {\n//   const dispath = useDispatch();\n//   const contacts = useSelector(selectContacts);\n//   const filter = useSelector(selectFilter);\n\n//   const addContact = newContact => {\n//     dispath(actions.addContact(newContact));\n//   };\n//   const deleteContact = id => {\n//     dispath(actions.deleteContact(id));\n//   };\n//   const changeFilter = e => {\n//     dispath(actions.changeFilter(e.target.value));\n//   };\n\n//   return { addContact, deleteContact, changeFilter, contacts, filter };\n// };\n\n//=============== After ========================\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectError,\n  selectFilter,\n  selectFilterName,\n  selectIsLoading,\n} from './selectors';\nimport { addContact, deleteContact } from './operations';\nimport { filterContact } from './filterSlice';\n\nexport const useContacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const handleDelete = id => dispatch(deleteContact(id));\n\n  const contactsFilterName = useSelector(selectFilterName);\n\n  const handleFilter = e => {\n    dispatch(filterContact(e.target.value));\n  };\n\n  const handleNotificationForm = values => {\n    const existingContact = contacts.find(\n      contact => contact.number === values.number\n    );\n    if (existingContact) {\n      alert(\n        `Sorry ${values.name}, this number is already registered, please enter another one.`\n      );\n      return;\n    }\n    dispatch(addContact({ ...values }));\n  };\n\n  return {\n    contacts,\n    filter,\n    isLoading,\n    error,\n    dispatch,\n    handleDelete,\n    contactsFilterName,\n    handleFilter,\n    handleNotificationForm,\n  };\n};\n"],"names":["FormikForm","styled","Form","Label","FormikInput","Field","Button","Error","ErrorMessage","schema","object","shape","name","string","required","email","password","INITIAL_STATE","RegisterForm","handleNotificationForm","useContacts","validationSchema","onSubmit","values","resetForm","console","log","initialValues","type","component","Register","selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectError","error","selectFilterName","createSelector","contact","toLowerCase","includes","dispatch","useDispatch","useSelector","contactsFilterName","handleDelete","id","deleteContact","handleFilter","e","filterContact","target","value","find","number","alert","addContact"],"sourceRoot":""}