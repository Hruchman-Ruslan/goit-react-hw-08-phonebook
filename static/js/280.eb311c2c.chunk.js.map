{"version":3,"file":"static/js/280.eb311c2c.chunk.js","mappings":"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","sources":["components/Contacts/Contacts.styled.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/selectors.js","redux/contacts/useContacts.js","components/Contacts/Contacts.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Form/Form.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  align-items: center;\n  gap: 40px;\n\n  margin-top: 40px;\n`;\n\nexport const Item = styled.li``;\n\nexport const Text = styled.p`\n  display: block;\n  font-weight: 700;\n`;\n\nexport const Button = styled.button`\n  display: block;\n  margin: auto;\n  font-size: 18px;\n  font-weight: 700;\n\n  padding: 8px 28px;\n  color: #a201ff;\n\n  border: 2px solid purple;\n  border-radius: 8px;\n\n  filter: drop-shadow(0px 0px 20px #00ffff);\n\n  &:hover,\n  &:focus {\n    filter: drop-shadow(0px 0px 20px #a201ff);\n    color: #a201ff;\n    border: 2px solid #00ffff;\n  }\n`;\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","//=============== Before ========================\n\n// export const selectContacts = state => state.contacts.items;\n// export const selectFilter = state => state.contacts.filter;\n\n//=============== After ========================\n\nimport { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilterName = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","//=============== Before ========================\n\n// import { useDispatch, useSelector } from 'react-redux';\n// import { selectContacts, selectFilter } from './selectors';\n\n// import * as actions from './contactsSlice';\n\n// export const useContacts = () => {\n//   const dispath = useDispatch();\n//   const contacts = useSelector(selectContacts);\n//   const filter = useSelector(selectFilter);\n\n//   const addContact = newContact => {\n//     dispath(actions.addContact(newContact));\n//   };\n//   const deleteContact = id => {\n//     dispath(actions.deleteContact(id));\n//   };\n//   const changeFilter = e => {\n//     dispath(actions.changeFilter(e.target.value));\n//   };\n\n//   return { addContact, deleteContact, changeFilter, contacts, filter };\n// };\n\n//=============== After ========================\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectError,\n  selectFilter,\n  selectFilterName,\n  selectIsLoading,\n} from './selectors';\nimport { addContact, deleteContact } from './operations';\nimport { filterContact } from './filterSlice';\nimport { toast } from 'react-toastify';\n\nexport const useContacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const handleDelete = id => dispatch(deleteContact(id));\n\n  const contactsFilterName = useSelector(selectFilterName);\n\n  const handleFilter = e => {\n    dispatch(filterContact(e.target.value));\n  };\n\n  const handleNotificationForm = values => {\n    const existingContact = contacts.find(\n      contact => contact.number === values.number\n    );\n\n    if (existingContact) {\n      toast.error(\n        `Hello ${values.name}, I'm sorry, the number is already taken.`\n      );\n      return;\n    }\n    if (!existingContact) {\n      toast.success(`User ${values.name} successfully created`);\n      dispatch(addContact({ ...values }));\n      return;\n    }\n  };\n\n  return {\n    contacts,\n    filter,\n    isLoading,\n    error,\n    dispatch,\n    handleDelete,\n    contactsFilterName,\n    handleFilter,\n    handleNotificationForm,\n  };\n};\n","import PropTypes from 'prop-types';\n\nimport { List, Item, Text, Button } from './Contacts.styled';\n\nimport { useContacts } from 'redux/contacts/useContacts';\n\nexport const ContactList = () => {\n  const { handleDelete, contactsFilterName } = useContacts();\n\n  return (\n    <List>\n      {contactsFilterName.map(({ id, name, number }) => (\n        <Item key={id}>\n          <Text>\n            {name}: {number}\n          </Text>\n          <Button type=\"button\" onClick={() => handleDelete(id)}>\n            Delete\n          </Button>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.number.isRequired,\n    }).isRequired\n  ),\n};\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  color: brown;\n  font-weight: 900;\n  font-size: 20px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n\n  font-size: 20px;\n  font-weight: 700;\n  margin: auto;\n  color: purple;\n  background-color: transparent;\n  outline: 1px solid aqua;\n\n  margin-top: 20px;\n\n  filter: drop-shadow(0px 0px 20px #00ffff);\n\n  &:hover,\n  &:focus {\n    filter: drop-shadow(0px 0px 20px #a201ff);\n  }\n`;\n","import { Label, Input } from './Filter.styled';\n\nimport { useContacts } from 'redux/contacts/useContacts';\n\nexport const Filter = () => {\n  const { filter, handleFilter } = useContacts();\n\n  return (\n    <Label>\n      Filter contacts by name\n      <Input type=\"text\" onChange={handleFilter} value={filter} />\n    </Label>\n  );\n};\n","import { Formik } from 'formik';\nimport { object, string } from 'yup';\n\nimport { FormikForm, Label, FormikInput, Button, Error } from './Form.styled';\nimport { useContacts } from 'redux/contacts/useContacts';\n\nconst phoneRegExp =\n  /^(?:\\+38)?(?:\\(0\\d{2}\\)|0\\d{2})[ -]?\\d{3}[ -]?\\d{2}[ -]?\\d{2}$/;\n\nconst schema = object().shape({\n  name: string()\n    .min(5, 'must be at least 3 characters long')\n    .max(12, 'must be no more than 12 characters')\n    .required('This field is required'),\n  number: string()\n    .matches(phoneRegExp, 'Please enter a valid phone number +380')\n    .required('A phone number is required'),\n});\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\n\nexport const FormContact = () => {\n  const { handleNotificationForm } = useContacts();\n\n  const handleSubmit = (values, { resetForm }) => {\n    handleNotificationForm(values);\n    resetForm();\n  };\n\n  return (\n    <Formik\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n      initialValues={INITIAL_STATE}\n    >\n      <FormikForm>\n        <Label>\n          Name\n          <FormikInput type=\"text\" name=\"name\" />\n          <Error name=\"name\" component=\"p\" />\n        </Label>\n        <Label>\n          Number\n          <FormikInput type=\"tel\" name=\"number\" />\n          <Error name=\"number\" component=\"p\" />\n        </Label>\n\n        <Button type=\"submit\">Add Contacts</Button>\n      </FormikForm>\n    </Formik>\n  );\n};\n\n// FormContact.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\n// const INITIAL_STATE = {\n//   name: '',\n//   number: '',\n// };\n\n// export const FormContact = ({ onSubmit }) => {\n//   const handleSubmit = (values, { resetForm }) => {\n//     onSubmit({ ...values, id: nanoid() });\n\n//     resetForm();\n//   };\n\n//   return (\n//     <Formik\n//       validationSchema={schema}\n//       initialValues={INITIAL_STATE}\n//       onSubmit={handleSubmit}\n//     >\n//       <FormikForm>\n//         <Label>\n//           Name\n//           <FormikInput type=\"text\" name=\"name\" />\n//           <Error name=\"name\" component=\"p\" />\n//         </Label>\n//         <Label>\n//           Number\n//           <FormikInput type=\"tel\" name=\"number\" />\n//           <Error name=\"number\" component=\"p\" />\n//         </Label>\n\n//         <Button type=\"submit\">Add Contacts</Button>\n//       </FormikForm>\n//     </Formik>\n//   );\n// };\n\n// FormContact.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n","import { Section } from 'components';\nimport { ContactList } from 'components/Contacts/Contacts';\nimport { Filter } from 'components/Filter/Filter';\nimport { FormContact } from 'components/Form/Form';\nimport { Notification } from 'components/Notification/Notification';\nimport { useEffect } from 'react';\n// import { Helmet } from 'react-helmet';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { useContacts } from 'redux/contacts/useContacts';\n\nexport default function Contacts() {\n  const { contacts, isLoading, error } = useContacts();\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Section>\n      {/* <Helmet>\n        <title>Your Contacts</title>\n      </Helmet> */}\n      <FormContact />\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      {contacts.length > 0 ? (\n        <ContactList />\n      ) : (\n        <Notification message=\"There is no feedback\" />\n      )}\n    </Section>\n  );\n}\n"],"names":["List","styled","Item","Text","Button","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectError","error","selectFilterName","contact","toLowerCase","includes","useContacts","dispatch","useDispatch","useSelector","contactsFilterName","handleDelete","id","deleteContact","handleFilter","e","filterContact","target","handleNotificationForm","values","existingContact","number","toast","addContact","ContactList","type","onClick","Label","Input","Filter","onChange","schema","object","shape","string","min","max","required","matches","INITIAL_STATE","FormContact","validationSchema","onSubmit","resetForm","initialValues","component","Contacts","useEffect","fetchContacts","Notification","message"],"sourceRoot":""}